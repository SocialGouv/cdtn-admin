global:
  pgUser: cdtn-admin
  pgDatabase: cdtn-admin

jobs:
  ~chart: jobs
  runs:
    build-frontend:
      use: build
      with:
        imagePackage: frontend
        dockerfile: targets/frontend/Dockerfile
        secrets:
          npmTiptapToken:
            secretName: npm-tiptap
            secretKey: NPM_TIPTAP_TOKEN
    build-ingester:
      use: build
      with:
        imagePackage: ingester
        dockerfile: targets/ingester/Dockerfile
    build-alert:
      use: build
      with:
        imagePackage: alert
        dockerfile: targets/alert-cli/Dockerfile
    build-export:
      use: build
      with:
        imagePackage: export
        dockerfile: targets/export-elasticsearch/Dockerfile
    build-hasura:
      use: build
      with:
        imagePackage: hasura
        context: targets/hasura

pg:
  ~chart: pg

www:
  ~chart: app
  ~needs: [build-frontend]
  probesPath: /healthz
  livenessProbe:
    httpGet:
      path: /healthz
      port: http
      scheme: HTTP
    initialDelaySeconds: 30   # Délai avant la première vérification après le démarrage du pod
    periodSeconds: 10         # Fréquence des vérifications
    timeoutSeconds: 10         # Temps maximum pour que l'endpoint réponde
    failureThreshold: 15       # Nombre d'échecs avant de redémarrer le conteneur
  imagePackage: frontend
  envFrom:
    - configMapRef:
        name: www
    - secretRef:
        name: www
    - secretRef:
        name: s3
    - secretRef:
        name: tipimail
    - secretRef:
        name: hasura
  env:
    - name: NEXTAUTH_URL
      value: https://www-{{.Values.global.host}}
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
    runAsGroup: 1000

export:
  ~chart: app
  ~needs: [build-export]
  probesPath: /healthz
  ingress:
    enabled: false
  imagePackage: export
  containerPort: 8787
  envFrom:
    - configMapRef:
        name: export-elasticsearch
    - secretRef:
        name: export-elasticsearch
    - secretRef:
        name: s3
  securityContext:
    fsGroup: 1000
    runAsUser: 1000
    runAsGroup: 1000
  annotations:
    oblik.socialgouv.io/min-request-cpu: "1500m"
    oblik.socialgouv.io/min-request-memory: "2Gi"
    oblik.socialgouv.io/min-limit-cpu: "2000m"
    oblik.socialgouv.io/min-limit-memory: "4Gi"

hasura:
  ~chart: hasura
  ~needs: [build-hasura, pg]
  imagePackage: hasura
  ingress:
    enabled: false
  envFrom:
    - configMapRef:
        name: hasura
    - secretRef:
        name: hasura
  securityContext:
    fsGroup: 1001
    runAsUser: 1001
    runAsGroup: 1001
  annotations:
    oblik.socialgouv.io/min-request-cpu: "1000m"
    oblik.socialgouv.io/min-request-memory: "1Gi"
    oblik.socialgouv.io/min-limit-cpu: "2000m"
    oblik.socialgouv.io/min-limit-memory: "4Gi"

deactivate:
  jobs-deactivate:
    runs:
      deactivate:
        with:
          db: true
