hasura:
  imagePackage: hasura
  ~needs: [post-restore, build-hasura]
  ~preDeploy.cleaner:
    match:
      kind: Deployment
    value: true
  envFrom:
    - secretRef:
        name: pg-user
    - configMapRef:
        name: hasura
    - secretRef:
        name: hasura

jobs:
  runs:
    drop-db: # temp
      use: drop-db
    create-db:
      ~needs: [drop-db] # temp
      use: create-db
    restore:
      ~needs: [create-db]
      retry: 3
      checkout: true
      image: ghcr.io/socialgouv/docker/psql:7.0.0
      envFrom:
        - secretRef:
            name: "pg-admin-user"
      env: 
        - name: OWNER
          value: "{{ $.Values.global.pgUser }}"
        - name: INPUT_PGDATABASE
          value: "{{ $.Values.global.pgDatabase }}"
      run: |
        set -e

        MOUNT_PATH=/mnt/restore
        FILTER_PATH=hasura_prod_db.psql.gz

        if [ -n "$INPUT_PGDATABASE" ]; then
          PGDATABASE="$INPUT_PGDATABASE"
        fi

        PGPORT=${PGPORT:-5432}

        MOUNT_PATH=${MOUNT_PATH:-""}
        if [ -n "$MOUNT_PATH" ]; then
          FILTER_PATH=${FILTER_PATH:-".*"}
          export LATEST=$(ls -1FR "$MOUNT_PATH" | grep -E "[0-9]{4}_[0-9]{2}_[0-9]{2}_${FILTER_PATH}" | sort -r | head -n 1);
          if [[ ${MOUNT_PATH:length-1:1} != "/" ]]; then
            export MOUNT_PATH="$MOUNT_PATH/"
          fi
        fi

        DUMP=$(eval echo "${MOUNT_PATH}${LATEST}")

        OWNER=${OWNER%%@*}

        echo "Restore ${DUMP} into ${PGDATABASE}"

        pg_isready

        set +e

        pg_restore \
          --dbname "$PGDATABASE" \
          --exclude-schema=audit \
          --no-owner \
          --role "$OWNER" \
          --no-acl \
          --verbose \
          "${DUMP}"

        set -e

        psql -v ON_ERROR_STOP=1 "$PGDATABASE" -c "ALTER SCHEMA public OWNER TO \"${OWNER}\";"
      volumeMounts:
        - name: restore
          mountPath: /mnt/restore
          readOnly: true
      volumes:
        - name: restore
          csi:
            driver: file.csi.azure.com
            readOnly: true
            volumeAttributes:
              secretName: cdtnadminprodserver-backup-credentials
              shareName: cdtnadminprodserver-backup-restore
    post-restore:
      ~needs: [restore]
      use: psql
      with:
        sqlFile: .kontinuous/sql/post-restore.sql
    job-ingester:
      ~needs: [hasura]
      use: trigger-cronjob
      with:
        cronJobName: cron-ingester
    job-alert:
      ~needs: [job-ingester]
      use: trigger-cronjob
      with:
        cronJobName: cron-alert
